{"version":3,"sources":["config/socketio.js"],"names":["socketio","console","log","on","socket","address","request","connection","remoteAddress","remotePort","connectedAt","Date","data","nsp","name","onDisconnect","onConnect","require","ChatSocket"],"mappings":";;;;;;;;;;kBA2Be,UAAUA,QAAV,EAAoB;AAC/BC,UAAQC,GAAR,CAAY,SAAZ;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,WAASG,EAAT,CAAY,YAAZ,EAA2BC,MAAD,IAAY;AACpCA,WAAOC,OAAP,GAAkB,GAAED,OAAOE,OAAP,CAAeC,UAAf,CAA0BC,aAAc,IAAGJ,OAAOE,OAAP,CAAeC,UAAf,CAA0BE,UAAW,EAApG;;AAEAL,WAAOM,WAAP,GAAqB,IAAIC,IAAJ,EAArB;;AAEAP,WAAOF,GAAP,GAAa,UAAU,GAAGU,IAAb,EAAmB;AAC9BX,cAAQC,GAAR,CAAa,YAAWE,OAAOS,GAAP,CAAWC,IAAK,KAAIV,OAAOC,OAAQ,GAA3D,EAA+D,GAAGO,IAAlE;AACD,KAFD;;AAIA;AACAR,WAAOD,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BY,mBAAaX,MAAb;AACAA,aAAOF,GAAP,CAAW,cAAX;AACD,KAHD;;AAKA;AACAc,cAAUZ,MAAV;AACAA,WAAOF,GAAP,CAAW,YAAX;AACD,GAlBD;AAmBD,C;;;;AA/DD;;;;AAKA;;AAEA;AACA,SAASa,YAAT,GAAsB,YAAc,CAAE;;AAEtC;AACA,SAASC,SAAT,CAAmBZ,MAAnB,EAA2B;AACzB;AACAA,SAAOD,EAAP,CAAU,MAAV,EAAmBS,IAAD,IAAU;AAC1BR,WAAOF,GAAP,CAAW,yBAAeU,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAX;AACD,GAFD;AAGAX,UAAQC,GAAR,CAAa,YAAWE,OAAOS,GAAP,CAAWC,IAAK,KAAIV,OAAOC,OAAQ,GAA3D;;AAEA;AACAY,UAAQ,yBAAR,EAAmCC,UAAnC,CAA8Cd,MAA9C;AACA;AACA;AACA;AACA;AACA;AACD","file":"socketio.js","sourcesContent":["/**\n * Socket.io configuration\n */\n\n\n// import config from './environment';\n\n// When the user disconnects.. perform this\nfunction onDisconnect(/* socket */) {}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', (data) => {\n    socket.log(JSON.stringify(data, null, 2));\n  });\n  console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`);\n\n  // // Insert sockets below\n  require('../api/chat/chat.socket').ChatSocket(socket);\n  //   require('../api/organisation/organisation.socket').organisationSocket(socket);\n  //   require('../api/department/department.socket').departmentSocket(socket);\n  //   require('../api/pimonkAgent/pimonkAgent.socket').piaiAgentSocket(socket);\n  //   require('../api/task/task.socket').TaskSocket(socket);\n  //   require('../api/invoice/invoice.socket').InvoiceSocket(socket);\n}\n\nexport default function (socketio) {\n    console.log('callled');\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  // socketio.use(require('socketio-jwt').authorize({\n  //   secret: config.secrets.session,\n  //   handshake: true\n  // }));\n\n  socketio.on('connection', (socket) => {\n    socket.address = `${socket.request.connection.remoteAddress}:${socket.request.connection.remotePort}`;\n\n    socket.connectedAt = new Date();\n\n    socket.log = function (...data) {\n      console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };\n\n    // Call onDisconnect.\n    socket.on('disconnect', () => {\n      onDisconnect(socket);\n      socket.log('DISCONNECTED');\n    });\n\n    // Call onConnect.\n    onConnect(socket);\n    socket.log('CONNECTED1');\n  });\n}\n"]}